
services:

  postgres:
    container_name: postgres
    image: postgres:latest
    env_file:
      - ./.env.local
    volumes:
      - /opt/manutenzione/postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s
    restart: always

  migrator:
    container_name: migrator
    image: lalghisi/migrator:latest
    environment:
      - AUTH_DRIZZLE_URL=postgres://postgres:postgres@postgres:5432/auth
      - AUTH_ADMIN_PSW=IamAdmin
      - AUTH_ADMIN_NAME=admin
      - AUTH_ADMIN_EMAIL=admin@amservice.it
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - amservice-network
    restart: no

  nextjs-app:
    container_name: nextjs-app
    image: lalghisi/amservice:1.0
    volumes:
      - /opt/manutenzione/private-files/:/app/private-files/
      - /opt/manutenzione/:/app/source/
    ports:
      - "80:3000"
    env_file:
        - ./.env.local
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - com.centurylinklabs.watchtower.enable=true
    networks:
      - amservice-network
    restart: always

  watchtower:
    container_name: watchover
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 600 --label-enable
    networks:
      - amservice-network
    restart: always

  cronjob:
    container_name: cronjob
    image: lalghisi/cron:1.0
    labels:
      - com.centurylinklabs.watchtower.enable=true
    networks:
      - amservice-network
    restart: always

  portainer:
    image: portainer/portainer-ce
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - "9000:9000"
    restart: always

networks:
  amservice-network:
    driver: bridge
